{"version":3,"sources":["redux/reducers/estimates/estimateReducer.jsx","redux/actions/types.jsx","redux/reducers/message/message.jsx","redux/reducers/index.jsx","redux/store/index.jsx","redux/index.jsx","components/layout/header.jsx","redux/reducers/message/messageSelector.jsx","components/layout/Alerts.jsx","redux/reducers/estimates/estimatorSelectors.jsx","redux/actions/messages.jsx","components/results.jsx","components/form.jsx","redux/actions/estimator/estimatorAction.jsx","components/kenny.jsx","components/with-spinner/withSpinner-styles.jsx","components/with-spinner/withSpinner.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","inputs","isLoading","estimateReducer","state","action","type","payload","messo","message","rootReducer","combineReducers","estimate","messages","middleware","thunk","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","header","className","to","id","href","selectedMessages","createSelector","Alerts","prevProps","this","props","alert","dataReceived","success","periodEmpty","error","timeElapse","passwordNotMatch","pupulation","reportedCases","totalHospitalBeds","Component","mapStateToProps","createStructuredSelector","connect","withAlert","selectEstimate","selectIsLoading","selectEstimateInputs","impactEstimatedData","period","days","currentImpact","infecByTime_impact","percent_impact","bedAvailable_impact","hospitalBedsByRequestedImpact","casesForICUByRequestedTime_impact","infectionsByRequestedTime_impact","curerntSevere","infecByTime_sever","percent_server","bedAvailable_severe","hospitalBedsByRequestedSeveer","casesForICUByRequestedTime_sever","infectionsByRequestedTime_seveer","useFulData","impact","cuurrentlyInfected","infectionsByRequestedTime","Number","toFixed","severeCasesByRequestedTime","availableBeds","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","severeImpact","severe","createMessage","msg","results","Estimates","setState","setTimeout","Container","Card","CardHeader","onClick","CardBody","ListGroup","ListGroupItem","style","color","CardFooter","React","SignUp","dissable","onChange","e","target","value","onSubmit","preventDefault","length","dataEstimator","getInputedata","disabled","history","push","pathname","xs","placeholder","required","name","data","dispatch","kenny","SpinnerOverlay","styled","div","SpinnerContainer","WithSpinner","WrappedComponent","otherProps","SignUpWithSpinner","ResultWithSpinner","Result","App","exact","path","render","component","Kenny","Boolean","location","hostname","match","ReactDOM","template","AlertTemplate","timeout","position","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83e42b5b.chunk.js","sourcesContent":["import * as actionTypes from \"../../actions/types\";\nconst initialState = {\n  inputs: null,\n  isLoading: false,\n};\n\nconst estimateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.IS_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n\n    case actionTypes.IS_LOADED:\n    case actionTypes.INPUTED_DATA:\n      return {\n        ...state,\n        inputs: action.payload,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default estimateReducer;\n","export const INPUTED_DATA = \"INPUTED_DATA\";\nexport const GET_MESSAGE = \"GET_MESSAGE\";\nexport const IS_LOADING = \"IS_LOADING\";\nexport const IS_LOADED = \"IS_LOADED\";\n","import * as actionTypes from \"../../actions/types\";\n\nconst initialState = {\n  messo: {},\n};\n\nconst message = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_MESSAGE:\n      return {\n        ...state,\n        messo: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default message;\n","import { combineReducers } from \"redux\";\nimport estimateReducer from \"./estimates/estimateReducer\";\nimport messages from \"./message/message\";\n\nconst rootReducer = combineReducers({\n  estimate: estimateReducer,\n  message: messages,\n});\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducers\";\nimport thunk from \"redux-thunk\";\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import store from \"./store\";\nexport default store;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nconst header = () => {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n        <div className=\"container\">\n          <Link className=\"navbar-brand\" to={\"/\"}>\n            {\" \"}\n            Covid 19 Risk Estimator{\" \"}\n          </Link>{\" \"}\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav ml-auto\">\n              <a href=\"https://github.com/ken1800\">@kenny</a>\n            </ul>{\" \"}\n          </div>{\" \"}\n        </div>{\" \"}\n      </nav>\n    </div>\n  );\n};\n\nexport default header;\n","import { createSelector } from \"reselect\";\n\nconst selectMessage = (state) => state.message;\n\nexport const selectedMessages = createSelector(\n  [selectMessage],\n  (message) => message.messo\n);\n","import React, { Component, Fragment } from \"react\";\nimport { withAlert } from \"react-alert\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { selectedMessages } from \"../../redux/reducers/message/messageSelector\";\nimport { createStructuredSelector } from \"reselect\";\nexport class Alerts extends Component {\n  static propTypes = {\n    message: PropTypes.object.isRequired,\n  };\n  componentDidUpdate(prevProps) {\n    //instead of wrinting this.props.error we have distructured the code\n    const { alert, message } = this.props;\n\n    //inputdata\n    if (message !== prevProps.message) {\n      if (message.dataReceived) alert.success(message.dataReceived);\n      if (message.periodEmpty) alert.error(message.periodEmpty);\n      if (message.timeElapse) alert.error(message.timeElapse);\n      if (message.passwordNotMatch) alert.error(message.passwordNotMatch);\n      if (message.pupulation) alert.error(message.pupulation);\n      if (message.reportedCases) alert.error(message.reportedCases);\n      if (message.totalHospitalBeds) alert.error(message.totalHospitalBeds);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Fragment />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  message: selectedMessages,\n});\n\nexport default connect(mapStateToProps, {})(withAlert()(Alerts));\n//\n","import { createSelector } from \"reselect\";\n\nconst selectEstimate = (state) => state.estimate;\n\nexport const selectIsLoading = createSelector(\n  [selectEstimate],\n  (estimate) => estimate.isLoading\n);\n\nexport const selectEstimateInputs = createSelector(\n  [selectEstimate],\n  (estimate) => estimate.inputs\n);\n\nexport const impactEstimatedData = createSelector(\n  [selectEstimateInputs],\n  (inputs) => {\n    // shared data\n    if (inputs) {\n      const { timeElapse, reportedCases, totalHospitalBeds, period } = inputs;\n      let days = timeElapse;\n\n      if (period === \"days\") {\n        days = timeElapse;\n      } else if (period === \"weeks\") {\n        days = 7 * timeElapse;\n      } else {\n        days = 30 * timeElapse;\n      }\n\n      //data for impact\n      const currentImpact = reportedCases * 10;\n      const infecByTime_impact = currentImpact * ((1024 / 30) * days);\n      const percent_impact = infecByTime_impact * 0.15;\n      const bedAvailable_impact = totalHospitalBeds * 0.35;\n      const hospitalBedsByRequestedImpact =\n        bedAvailable_impact - percent_impact;\n      const casesForICUByRequestedTime_impact = infecByTime_impact * 0.05;\n      const infectionsByRequestedTime_impact = infecByTime_impact * 0.02;\n\n      //data fro seveer cases\n      const curerntSevere = reportedCases * 50;\n      const infecByTime_sever = curerntSevere * ((1024 / 30) * days);\n      const percent_server = infecByTime_sever * 0.15;\n      const bedAvailable_severe = totalHospitalBeds * 0.35;\n      const hospitalBedsByRequestedSeveer =\n        bedAvailable_severe - percent_server;\n      const casesForICUByRequestedTime_sever = infecByTime_sever * 0.05;\n      const infectionsByRequestedTime_seveer = infecByTime_sever * 0.02;\n\n      const useFulData = {\n        impact: {\n          cuurrentlyInfected: currentImpact,\n          infectionsByRequestedTime: Number(infecByTime_impact.toFixed(0)),\n          severeCasesByRequestedTime: Number(percent_impact.toFixed(0)),\n          availableBeds: Number(bedAvailable_impact.toFixed(0)),\n          hospitalBedsByRequestedImpact: Number(\n            hospitalBedsByRequestedImpact.toFixed(0)\n          ),\n          casesForICUByRequestedTime: Number(\n            casesForICUByRequestedTime_impact.toFixed(0)\n          ),\n          casesForVentilatorsByRequestedTime: Number(\n            infectionsByRequestedTime_impact.toFixed(0)\n          ),\n        },\n        severeImpact: {\n          cuurrentlyInfected: curerntSevere,\n          infectionsByRequestedTime: Number(infecByTime_sever.toFixed(0)),\n          severeCasesByRequestedTime: Number(percent_server.toFixed(0)),\n          availableBeds: Number(bedAvailable_severe.toFixed(0)),\n          hospitalBedsByRequestedSeveer: Number(\n            hospitalBedsByRequestedSeveer.toFixed(0)\n          ),\n          casesForICUByRequestedTime: Number(\n            casesForICUByRequestedTime_sever.toFixed()\n          ),\n          casesForVentilatorsByRequestedTime: Number(\n            infectionsByRequestedTime_seveer.toFixed(0)\n          ),\n        },\n      };\n\n      return {\n        impact: useFulData.impact,\n        severe: useFulData.severeImpact,\n      };\n    } else return;\n  }\n);\n","import * as actionType from \"./types\";\n\n// CREATE MESSAGE\nexport const createMessage = (msg) => {\n  return {\n    type: actionType.GET_MESSAGE,\n    payload: msg,\n  };\n};\n\n// RETURN ERRORS\n// export const returnErrors = (msg, status) => {\n//   return {\n//     type: actionType.GET_ERRORS,\n//     payload: { msg, status },\n//   };\n// };\n","import React from \"react\";\nimport {\n  Container,\n  Card,\n  CardHeader,\n  CardBody,\n  ListGroup,\n  ListGroupItem,\n  CardFooter,\n} from \"reactstrap\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { impactEstimatedData } from \"../redux/reducers/estimates/estimatorSelectors\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport { createMessage } from \"../redux/actions/messages\";\nclass results extends React.Component {\n  state = {\n    cuurrentlyInfected: 0,\n    infectionsByRequestedTime: 0,\n    severeCasesByRequestedTime: 0,\n    availableBeds: 0,\n    hospitalBedsByRequestedImpact: 0,\n    casesForICUByRequestedTime: 0,\n    casesForVentilatorsByRequestedTime: 0,\n  };\n\n  componentDidMount() {\n    if (this.props.Estimates) {\n      this.setState({\n        cuurrentlyInfected: this.props.Estimates.impact.cuurrentlyInfected,\n        infectionsByRequestedTime: this.props.Estimates.impact\n          .infectionsByRequestedTime,\n        severeCasesByRequestedTime: this.props.Estimates.impact\n          .severeCasesByRequestedTime,\n        availableBeds: this.props.Estimates.impact\n          .hospitalBedsByRequestedImpact,\n        hospitalBedsByRequestedImpact: this.props.Estimates.impact\n          .casesForICUByRequestedTime,\n        casesForICUByRequestedTime: this.props.Estimates.impact\n          .casesForICUByRequestedTime,\n        casesForVentilatorsByRequestedTime: this.props.Estimates.impact\n          .casesForVentilatorsByRequestedTime,\n      });\n      setTimeout(\n        () =>\n          this.props.createMessage({\n            dataReceived:\n              \"Hey !! Check on the severe cases  clicking the link on the top of the form\",\n          }),\n\n        6000\n      );\n    }\n  }\n  render() {\n    if (!this.props.Estimates) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const severe = () => {\n      if (this.props.Estimates.impact) {\n        this.setState({\n          cuurrentlyInfected: this.props.Estimates.severe.cuurrentlyInfected,\n          infectionsByRequestedTime: this.props.Estimates.severe\n            .infectionsByRequestedTime,\n          severeCasesByRequestedTime: this.props.Estimates.severe\n            .severeCasesByRequestedTime,\n          availableBeds: this.props.Estimates.severe\n            .hospitalBedsByRequestedImpact,\n          hospitalBedsByRequestedImpact: this.props.Estimates.severe\n            .casesForICUByRequestedTime,\n          casesForICUByRequestedTime: this.props.Estimates.severe\n            .casesForICUByRequestedTime,\n          casesForVentilatorsByRequestedTime: this.props.Estimates.severe\n            .casesForVentilatorsByRequestedTime,\n        });\n      }\n    };\n    return (\n      <div>\n        <Container>\n          <Card>\n            <CardHeader>\n              <p className=\"btn btn-warning btn-block\">\n                {\" \"}\n                This is the estimate of the Impact given your data\n              </p>\n              <p className=\"forgot-password text-right\">\n                Click here to see the{\" \"}\n                <a href=\"#\" onClick={() => severe()}>\n                  {\" \"}\n                  severe\n                </a>{\" \"}\n                case\n              </p>{\" \"}\n            </CardHeader>\n            <CardBody>\n              <ListGroup>Cuurrently Infected</ListGroup>\n              <ListGroupItem style={{ color: \"green\" }}>\n                {this.state.cuurrentlyInfected}\n              </ListGroupItem>\n              <ListGroup>Infections By Requested Time</ListGroup>\n              <ListGroupItem style={{ color: \"green\" }}>\n                {this.state.infectionsByRequestedTime}\n              </ListGroupItem>\n              <ListGroup>Severe Cases By Requested Time</ListGroup>\n              <ListGroupItem style={{ color: \"green\" }}>\n                {this.state.severeCasesByRequestedTime}\n              </ListGroupItem>\n              <ListGroup>Hospital Beds By Requested Time</ListGroup>\n              <ListGroupItem style={{ color: \"green\" }}>\n                {this.state.hospitalBedsByRequestedImpact}\n              </ListGroupItem>\n              <ListGroup>Cases For ICU By Requested Time</ListGroup>\n              <ListGroupItem style={{ color: \"red\" }}>\n                {this.state.casesForICUByRequestedTime}\n              </ListGroupItem>\n              <ListGroup>Cases For Ventilators By Requested Time</ListGroup>\n              <ListGroupItem style={{ color: \"red\" }}>\n                {this.state.casesForVentilatorsByRequestedTime}\n              </ListGroupItem>\n            </CardBody>\n            <CardFooter>\n              {/* <Spinner color=\"primary\" /> */}\n              {/* <button className=\"btn btn-primary btn-block\"> New </button>{\" \"} */}\n              <p className=\"forgot-password text-right\">\n                Wanna try with another data ? <Link to={\"/\"}> New </Link>{\" \"}\n              </p>{\" \"}\n            </CardFooter>\n          </Card>\n        </Container>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  Estimates: impactEstimatedData,\n});\nexport default connect(mapStateToProps, { createMessage })(results);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getInputedata } from \"../redux/actions/estimator/estimatorAction\";\nimport { createMessage } from \"../redux/actions/messages\";\n\nclass SignUp extends Component {\n  state = {\n    pupulation: \"\",\n    period: \"\",\n    timeElapse: \"\",\n    reportedCases: \"\",\n    totalHospitalBeds: \"\",\n    dissable: false,\n  };\n\n  onChange = (e) => this.setState({ [e.target.id]: e.target.value });\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    const {\n      pupulation,\n      timeElapse,\n      reportedCases,\n      totalHospitalBeds,\n      period,\n    } = this.state;\n\n    if (!period) {\n      this.props.createMessage({ periodEmpty: \"Select Period Type\" });\n    } else if (Number(timeElapse) < 1 || timeElapse.length < 1) {\n      this.props.createMessage({\n        timeElapse: \"Time elapsed must be greater than 1\",\n      });\n      this.setState({\n        timeElapse: \"\",\n      });\n    } else if (Number(pupulation) < 10 || pupulation.length < 2) {\n      this.props.createMessage({\n        pupulation: \"population should be greater than 10\",\n      });\n      this.setState({\n        pupulation: \"\",\n      });\n    } else if (Number(reportedCases) < 1 || reportedCases.length < 1) {\n      this.props.createMessage({\n        reportedCases: \"Reported cases should be greater than 1\",\n      });\n      this.setState({\n        reportedCases: \"\",\n      });\n    } else if (Number(totalHospitalBeds) < 10 || pupulation.length < 2) {\n      this.props.createMessage({\n        totalHospitalBeds: \"Total Hospital Beds can't be less than 10\",\n      });\n      this.setState({\n        totalHospitalBeds: \"\",\n      });\n    } else {\n      const dataEstimator = {\n        pupulation,\n        timeElapse,\n        reportedCases,\n        totalHospitalBeds,\n        period,\n      };\n\n      this.props.getInputedata(dataEstimator);\n      this.setState({\n        pupulation: \"\",\n        period: \"\",\n        timeElapse: \"\",\n        reportedCases: \"\",\n        totalHospitalBeds: \"\",\n        disabled: true,\n      });\n\n      setTimeout(() => this.props.history.push({ pathname: \"/result\" }), 1000);\n    }\n  };\n  render() {\n    const {\n      pupulation,\n      timeElapse,\n      reportedCases,\n      totalHospitalBeds,\n      period,\n    } = this.state;\n    return (\n      <form xs=\"10\" onSubmit={this.onSubmit}>\n        <h3\n          style={{\n            color: \"blue\",\n          }}\n        >\n          {\" \"}\n          Estimator{\" \"}\n        </h3>{\" \"}\n        <div className=\"form-group\">\n          <label> Population </label>{\" \"}\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            placeholder=\"Enter your pupulation\"\n            id=\"pupulation\"\n            value={pupulation}\n            onChange={this.onChange}\n            required\n          />\n        </div>{\" \"}\n        <div className=\"form-group\">\n          <label> Period Type </label>{\" \"}\n          <select\n            // required\n            id=\"period\"\n            name=\"period\"\n            value={period}\n            onChange={this.onChange}\n            className=\"form-control\"\n            placeholder=\"Choose Period Type\"\n          >\n            <option value=\"\"> Select the period type </option>{\" \"}\n            <option value=\"days\"> Days </option>{\" \"}\n            <option value=\"weeks\"> weeks </option>{\" \"}\n            <option value=\"months\"> months </option>{\" \"}\n          </select>{\" \"}\n        </div>{\" \"}\n        <div className=\"form-group\">\n          <label> Time To Elapse </label>{\" \"}\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            placeholder=\"Enter time to elapse\"\n            id=\"timeElapse\"\n            onChange={this.onChange}\n            value={timeElapse}\n            required\n          />\n        </div>{\" \"}\n        <div className=\"form-group\">\n          <label> Reported Cases </label>{\" \"}\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            placeholder=\"Enter the number of reported cases\"\n            id=\"reportedCases\"\n            onChange={this.onChange}\n            value={reportedCases}\n            required\n          />\n        </div>{\" \"}\n        <div className=\"form-group\">\n          <label> Total Hospital Beds </label>{\" \"}\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            placeholder=\"Enter the total hospital bed in your country\"\n            id=\"totalHospitalBeds\"\n            onChange={this.onChange}\n            value={totalHospitalBeds}\n            required\n          />\n        </div>{\" \"}\n        <button\n          disabled={this.state.dissable}\n          type=\"submit\"\n          className=\"btn btn-primary btn-block\"\n        >\n          {\" \"}\n          Data Go Estimate{\" \"}\n        </button>{\" \"}\n      </form>\n    );\n  }\n}\nexport default connect(null, { getInputedata, createMessage })(SignUp);\n","import * as actionTypes from \"../types\";\nimport { createMessage } from \"../messages\";\n\nexport const getInputedata = (data) => (dispatch) => {\n  dispatch({\n    type: actionTypes.IS_LOADING,\n  });\n\n  setTimeout(\n    () =>\n      dispatch(createMessage({ dataReceived: \"Data received succesfully\" })),\n    1000\n  );\n\n  setTimeout(\n    () =>\n      dispatch({\n        type: actionTypes.INPUTED_DATA,\n        payload: data,\n      }),\n    2000\n  );\n};\n","import React from \"react\";\n\nexport default function kenny() {\n  return (\n    <div>\n      {\" \"}\n      <h1>Hey !!! was this helpful ??....</h1>\n      <p>if yes, then check out my other projects on Github</p>\n      <h3 style={{ color: \"green\" }}>Username: </h3>{\" \"}\n      <h3 style={{ color: \"red\" }}>ken1800</h3>\n    </div>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const SpinnerOverlay = styled.div`\n  height: 60vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(195, 195, 195, 0.6);\n  border-radius: 50%;\n  border-top-color: #636767;\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { SpinnerContainer, SpinnerOverlay } from \"./withSpinner-styles\";\n\nconst WithSpinner = (WrappedComponent) => {\n  const Spinner = ({ isLoading, ...otherProps }) => {\n    return isLoading ? (\n      <SpinnerOverlay>\n        <SpinnerContainer />\n      </SpinnerOverlay>\n    ) : (\n      <WrappedComponent {...otherProps} />\n    );\n  };\n  return Spinner;\n};\n\nexport default WithSpinner;\n","import React from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/layout/header\";\nimport Alerts from \"./components/layout/Alerts\";\nimport Result from \"./components/results\";\nimport SignUp from \"./components/form\";\nimport Kenny from \"./components/kenny\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport { selectIsLoading } from \"./redux/reducers/estimates/estimatorSelectors\";\n// import { getInputedata } from \"./redux/actions/estimator/estimatorAction\";\nimport WithSpinner from \"./components/with-spinner/withSpinner\";\n\nconst SignUpWithSpinner = WithSpinner(SignUp);\nconst ResultWithSpinner = WithSpinner(Result);\n\nclass App extends React.Component {\n  render() {\n    const { isLoading } = this.props;\n    return (\n      <Router>\n        <div className=\"App\">\n          <div>\n            <Header />\n          </div>{\" \"}\n          <Alerts />\n          <div className=\"auth-wrapper\">\n            <div className=\"auth-inner\">\n              <Switch>\n                <Route\n                  exact\n                  path=\"/\"\n                  render={(props) => (\n                    <SignUpWithSpinner isLoading={isLoading} {...props} />\n                  )}\n                />\n                <Route\n                  exact\n                  path=\"/result\"\n                  render={(props) => (\n                    <ResultWithSpinner isLoading={isLoading} {...props} />\n                  )}\n                />{\" \"}\n                <Route exact path=\"/kenny\" component={Kenny} />{\" \"}\n              </Switch>{\" \"}\n            </div>{\" \"}\n          </div>{\" \"}\n        </div>{\" \"}\n      </Router>\n    );\n  }\n}\nconst mapStateToProps = createStructuredSelector({\n  isLoading: selectIsLoading,\n});\nexport default connect(mapStateToProps, {})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider as AlertProvider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\n\nconst alertOptions = {\n  timeout: 5000,\n  position: \"bottom right\",\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <AlertProvider template={AlertTemplate} {...alertOptions}>\n        <App />\n      </AlertProvider>{\" \"}\n    </BrowserRouter>{\" \"}\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}